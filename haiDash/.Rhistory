devtools::document()
devtools::check()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
.rs.restartR()
devtools::document()
devtools::document()
devtools::load_all()
getNamespaceExports("haiDash")
getwd()
list.files()
devtools::document()
devtools::load_all()
getNamespaceExports("haiDash")
devtools::document()
devtools::load_all()
getNamespaceExports("haiDash")
getwd()
list.files("R")
getwd()
list.files()
devtools::document()
devtools::load_all()
getNamespaceExports("haiDash")
haiDash::run_app()
shiny::runApp('inst/app')
devtools::document()
devtools::load_all()
getNamespaceExports("haiDash")
haiDash::run_app()
#' Launch the Shiny app
#'
#' This launches the interactive Shiny application included in the haiDash package.
#'
#' @return Invisible NULL; runs the app for its side-effect.
#' @export
run_app <- function() {
app_dir <- system.file("app", package = "haiDash")
if (app_dir == "") {
stop("App folder not found. Try reinstalling the package.", call. = FALSE)
}
shiny::runApp(app_dir, display.mode = "normal")
}
if ("haiDash" %in% loadedNamespaces()) unloadNamespace("haiDash")
devtools::document()
devtools::load_all()
getNamespaceExports("haiDash")
ls("package:haiDash")
exists("run_app", where = asNamespace("haiDash"), inherits = FALSE)
haiDash::run_app()
devtools::clean_dll()
if ("haiDash" %in% loadedNamespaces()) unloadNamespace("haiDash")
devtools::document()
devtools::load_all()
getNamespaceExports("haiDash")
if ("haiDash" %in% loadedNamespaces()) unloadNamespace("haiDash")
devtools::document()
devtools::load_all()
getNamespaceExports("haiDash")
exists("run_app", where = asNamespace("haiDash"), inherits = FALSE)
list.files("R", full.names = TRUE)
source("R/run_app.R")
getwd()
if ("haiDash" %in% loadedNamespaces()) unloadNamespace("haiDash")
devtools::document()
devtools::load_all()
getNamespaceExports("haiDash")
rm(run_app)
devtools::load_all()
haiDash::run_app()
devtools::document()
devtools::load_all()
haiDash::run_app()
runApp()
runApp('inst/app')
devtools::document()
devtools::load_all()
getNamespaceExports("haiDash")
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
getwd()
file.exists(".Rbuildignore")
readLines(".Rbuildignore")
devtools::document()
devtools::check()
getwd()
file.exists(".Rbuildignore")
.rs.restartR()
devtools::document()
devtools::check()
readLines(".Rbuildignore")
devtools::document()
devtools::check()
pkgdown::build_site()
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
devtools::build_readme()
setwd("~/Desktop/2025 ETC5523/assignment-4-packages-and-shiny-apps-Qiuyuan0055/haiDash")
getwd()
rmarkdown::render("README.Rmd")
rmarkdown::render("haiDash/README.Rmd")
rmarkdown::render("../README.Rmd")
pkgdown::build_site()
usethis::use_vignette("haiDash-demo")
devtools::build_vignettes()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
devtools::document()
devtools::check()
# install.packages("remotes")
remotes::install_github(
"ETC5523-2025/assignment-4-packages-and-shiny-apps-Qiuyuan0055",
subdir = "haiDash",
upgrade = "never"
)
library(haiDash)
# 1. Load the dataset
data("hai_clean")
head(hai_clean)
# 2. Summarise infection counts and shares
tbl <- summarise_hai(hai_clean)
tbl
# 3. Visualise interactively using the Shiny app
run_app()
browseVignettes("haiDash")
# or
vignette("haiDash-demo", package = "haiDash")
devtools::document()
devtools::check()
devtools::build_readme()
pkgdown::build_site()
pkgdown::build_site()
list.files("docs", recursive = TRUE, all.files = TRUE)
pkgdown::build_site()
pkgdown::build_site()
if (!file.exists("docs/.nojekyll")) file.create("docs/.nojekyll")
pkgdown::build_site()
pkgdown::build_site()
if (!file.exists("docs/.nojekyll")) file.create("docs/.nojekyll")
file.rename(".nojekyll.txt", "docs/.nojekyll")
list.files("docs")
file.remove("docs/.nojekyll.txt")
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
devtools::build_readme()
getwd()
getwd()
devtools::build_readme()
file.exists("README.Rmd")
if (file.exists("man/README.Rmd")) {
file.rename("man/README.Rmd", "README.Rmd")
}
usethis::use_readme_rmd(open = TRUE)
devtools::build_readme()
file.exists("DESCRIPTION")
file.exists("README.Rmd")
file.exists("README.Rmd")
file.exists("man/README.Rmd")
devtools::build_readme()
library(pkgdown)
pkgdown::build_site()
Then load the package:
# Data
```{r}
# install.packages("pak")
pak::pak("ETC5523-2025/assignment-4-packages-and-shiny-apps-Qiuyuan0055")
install.packages("pak")
# install.packages("pak")
pak::pak("ETC5523-2025/assignment-4-packages-and-shiny-apps-Qiuyuan0055")
# install.packages("pak")
pak::pak("ETC5523-2025/assignment-4-packages-and-shiny-apps-Qiuyuan0055/haiDash")
library(haiDash)
?haiDash
??haiDash
pkgdown::build_site()
devtools::document()
devtools::install()
library(haiDash)
?haiDash
devtools::document()
devtools::install()
pkgdown::build_site()
if ("haiDash" %in% loadedNamespaces()) unloadNamespace("haiDash")
if ("package:haiDash" %in% search()) detach("package:haiDash", unload = TRUE, character.only = TRUE)
.libPaths()
suppressWarnings(try(remove.packages("haiDash"), silent = TRUE))
for (lib in .libPaths()) {
p <- file.path(lib, "haiDash")
if (dir.exists(p)) {
message("Deleting: ", p)
unlink(p, recursive = TRUE, force = TRUE)
}
}
.libPaths(c(Sys.getenv("R_LIBS_USER"), .libPaths()))
devtools::document()
devtools::load_all()
devtools::install(upgrade = "never", lib = Sys.getenv("R_LIBS_USER"))
library(haiDash)
packageVersion("haiDash")
ls("package:haiDash")
?haiDash::summarise_hai
dir.create(Sys.getenv("R_LIBS_USER"), recursive = TRUE, showWarnings = FALSE)
.libPaths(c(Sys.getenv("R_LIBS_USER"), .libPaths()))
devtools::install(upgrade = "never")
find.package("haiDash")
packageVersion("haiDash")
pkgdown::build_site()
pkgdown::preview_site()
run_app()
pkgdown::build_site()
